using error;
using camera;
using display;
using decoder;

using <sys/select.h>::{
    select,
    fd_set,
    FD_ZERO,
    FD_SET,
    (struct timeval) as Timeval,
};
using <errno.h>::{
    errno,
    perror,
    EINTR,
};
using <stdio.h>::{
    printf,
    fprintf,
    stderr,
    exit,
};
using <stdint.h>::{uint8_t, size_t};
using <memory.h>::{
    malloc,
    alloca,
    memset
};

pub fn main() -> int {
    error::Error mut err = {0};

    display::Display mut view = {0};
    display::open(&view, &err);
    error::abort(&err);

    camera::Camera mut cam = {0};
    camera::open(&cam, &err, "/dev/video0");
    error::abort(&err);

    decoder::Decoder mut dec = {0};
    decoder::open(&dec, &err);
    error::abort(&err);

    camera::streamon(&cam, &err);
    error::abort(&err);

    uint8_t mut* mut rgb_frame = malloc(cam.height * cam.width * 3);
    uint8_t mut* mut yuy_frame = malloc(cam.height * cam.width * 3);
    memset(rgb_frame, 100, cam.height * cam.width * 3);
    memset(yuy_frame, 100, cam.height * cam.width * 3);

    for (;;) {
        fd_set mut fds;
        Timeval mut tv = Timeval {
            .tv_sec  = 2,
            .tv_usec = 0,
        };

        FD_ZERO(&fds);
        FD_SET(cam.fd, &fds);

        int r = select(cam.fd + 1, &fds, NULL, NULL, &tv);
        if r == -1 {
            if errno == EINTR {
                continue;
            }
            perror("select");
            return 1;
        }

        if (0 == r) {
            fprintf(stderr, "select timeout\\n");
            exit(EXIT_FAILURE);
        }

        camera::Frame frame = camera::take(&cam, &err);
        error::abort(&err);


        size_t mut stride = 0;
        decoder::decode(&dec, &err, frame.data, frame.size, yuy_frame, &stride);
        error::abort(&err);


        yuyv_to_gray(yuy_frame, rgb_frame, cam.width, cam.height, stride);
        //yuyv_to_rgb(frame.data, rgb_frame, cam.width, cam.height);


        display::show(&view, rgb_frame, cam.width, cam.height);

        camera::release(&frame, &err);
        error::abort(&err);
    }


    camera::streamoff(&cam, &err);
    error::abort(&err);
    camera::close(&cam);
    return 0;
}


macro rgbclip(to, val) {
    if (v > 255) {
        to = 255;
    } else if (v < 0) {
        to = 0;
    } else {
        to = v;
    }
}

fn yuyv_to_gray(uint8_t *src, uint8_t mut * mut dest , int width, int height, size_t stride) {
    for (int mut y = 0; y < height ; y++) {
        uint8_t* mut      yuy  = src  + (stride * y);
        uint8_t  mut* mut gray = dest + (width  * y);

        for (int mut x = 0; x < width; x += 2) {
            gray[x] = yuy[0];
            yuy += 1;
            gray[x + 1] = yuy[0];
            yuy += 1;
        }
    }
}


fn yuyv_to_rgb(uint8_t *yuyv_image, uint8_t mut * mut rgb_image, int width, int height) {
    int mut y;
    int mut cr;
    int mut cb;

    double mut r;
    double mut g;
    double mut b;

    int mut i = 0;
    int mut j = 0;
    for (; i < width * height * 3;) {
        //first pixel
        y = yuyv_image[j];
        cb = yuyv_image[j+1];
        cr = yuyv_image[j+3];

        r = y + (1.4065 * (cr - 128));
        g = y - (0.3455 * (cb - 128)) - (0.7169 * (cr - 128));
        b = y + (1.7790 * (cb - 128));


        //This prevents colour distortions in your rgb image
        if (r < 0) {
            r = 0;
        } else if (r > 255) {
            r = 255;
        }
        if (g < 0) {
            g = 0;
        } else if (g > 255) {
            g = 255;
        }
        if (b < 0) {
            b = 0;
        } else if (b > 255) {
            b = 255;
        }

        rgb_image[i]   = r;
        rgb_image[i+1] = g;
        rgb_image[i+2] = b;

        //second pixel
        y = yuyv_image[j+2];
        cb = yuyv_image[j+1];
        cr = yuyv_image[j+3];

        r = y + (1.4065 * (cr - 128));
        g = y - (0.3455 * (cb - 128)) - (0.7169 * (cr - 128));
        b = y + (1.7790 * (cb - 128));

        if (r < 0) {
            r = 0;
        } else if (r > 255) {
            r = 255;
        }
        if (g < 0) {
            g = 0;
        } else if (g > 255) {
            g = 255;
        }
        if (b < 0) {
            b = 0;
        } else if (b > 255) {
            b = 255;
        }

        rgb_image[i+3] = r;
        rgb_image[i+4] = g;
        rgb_image[i+5] = b;




        i+=6;
        j+=4;
    }
}
